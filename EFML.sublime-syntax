%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: EFML
comment: EFML syntax for SublimeText
file_extensions:
  - eft
scope: text.eft
contexts:
  main:
    - include: eft_tag_selector
    - include: eft_line_attr
    - include: eft_line_prop
    - include: eft_line_event
    - include: eft_node
    - include: eft_string
    - include: eft_comment

  eft_tag_selector:
    - match: \t*?(?=\>)
      push:
      - meta_scope: meta.selector.eft
      - match: $
        scope: tag.eft
        pop: true
      - include: eft_tag
      - include: eft_class
      - include: eft_alias

  eft_tag:
    - match: \>
      push:
      - meta_scope: entity.name.tag.block.any.eft
      - match: ((?=(\.|\#))|$)
        pop: true

  eft_class:
    - match: \.
      push:
      - meta_scope: meta.selector.css entity.other.attribute-name.class.eft
      - match: ((?=\#)|$)
        pop: true

  eft_alias:
    - match: \#
      push:
      - meta_scope: entity.other.attribute-name.id.html
      - match: $
        pop: true

  eft_line_attr:
    - match: \t*?(?=#)
      push:
      - meta_scope: meta.line.attr.eft
      - match: $
        pop: true
      - include: eft_attr
      - include: eft_string

  eft_attr:
    - match: \#
      push:
      - meta_scope: entity.other.attribute-name.html
      - match: ((?=\=)|$)
        pop: true

  eft_line_prop:
    - match: \t*?(?=%)
      push:
      - meta_scope: meta.line.prop.eft
      - match: $
        pop: true
      - include: eft_prop
      - include: eft_string

  eft_prop:
    - match: \%
      push:
      - meta_scope: keyword.control.eft
      - match: ((?=\=)|$)
        pop: true

  eft_line_event:
    - match: \t*?(?=@)
      push:
      - meta_scope: meta.line.event.eft
      - match: $
        pop: true
      - include: eft_event
      - include: eft_function

  eft_event:
    - match: \@
      push:
      - meta_scope: variable.function.eft
      - match: ((?=\=)|$)
        pop: true

  eft_node:
    - match: ^\t*?[+-].*?$
      scope: storage.type.eft

  eft_function:
    - match: (?<=\=)
      push:
      - meta_scope: entity.name.function.eft
      - match: $
        pop: true

  eft_string:
    # Strings begin with '.', and use '&' as an escape character
    - match: ((?<=\=)|^\t*+\.)
      push:
      - meta_scope: string.eft
      - match: \&.?
        scope: constant.character.escape.eft
      - match: $
        pop: true
      - include: mustache_value

  eft_comment:
    # Comments not begin with '>.#%@+-' and finish at the end of the line
    - match: ^\t*+[^>.#%@+-]
      scope: punctuation.definition.comment.eft
      push: line_comment

  mustache_value:
    # Path with default value begin and end with mustaches
    - match: '{{'
      push:
      - meta_scope: expression.embbeded.eft
      - match: '}}'
        pop: true
      - include: mustache_path
      - include: mustache_string
      # - include: scope:source.js

  mustache_path:
    - match: (?<={{)
      push:
      - meta_scope: variable.other.object.eft
      - match: (?=(=|$|}}))
        pop: true

  mustache_string:
    # Strings begin with '=', and use '&' as an escape character
    - match: (?<=\=)
      scope: text.eft
      push:
      - meta_scope: text.eft
      - match: \&(?!}}).
        scope: constant.character.escape.eft
      - match: (?=}})
        pop: true

  line_comment:
    - meta_scope: comment.line.eft
    - match: $
      pop: true
